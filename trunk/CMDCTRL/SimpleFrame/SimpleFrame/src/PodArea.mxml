<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml"
	width="100%" height="100%"
	backgroundSize="100%"
	paddingLeft="45" paddingRight="45" paddingBottom="35"
	creationComplete="init()">
	<mx:Script>
		<![CDATA[
			import mx.events.ModuleEvent;
			import mx.events.CollectionEvent;
			import mx.modules.ModuleLoader;
			import com.wisoft.vo.SysConst;
			import com.wisoft.vo.UserInfo;
			import mx.collections.ArrayCollection;
			import com.wisoft.util.IconUtility;
			import mx.controls.Image;
			import flash.utils.getDefinitionByName;
			import com.esria.samples.dashboard.events.LayoutChangeEvent;
			import com.esria.samples.dashboard.managers.PodLayoutManager;
			import com.esria.samples.dashboard.managers.StateManager;
			import com.esria.samples.dashboard.view.ChartContent;
			import com.esria.samples.dashboard.view.FormContent;
			import com.esria.samples.dashboard.view.ListContent;
			import com.esria.samples.dashboard.view.PieChartContent;
			import com.esria.samples.dashboard.view.Pod;
			import com.esria.samples.dashboard.view.PodContentBase;
			import mx.containers.Canvas;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.events.IndexChangedEvent;
			import mx.events.ItemClickEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.http.HTTPService;
			
			public var podlist:ArrayCollection = new ArrayCollection();
			
			public var servicesurl:String = "../services";
			
			public var curUser:UserInfo = SysConst.curUser;
			
			private var podLayoutManager:PodLayoutManager;
			
			// Stores PodLayoutManagers keyed off of a Pod.
			// Used for podLayoutManager calls after pods have been created for the first time.
			// Also, used for look-ups when saving pod content ViewStack changes.
			private var podHash:Object = new Object();
			
			private function init():void{
				// Create a canvas for each view node.
				var canvas:Canvas = new Canvas();
				// PodLayoutManager handles resize and should prevent the need for
				// scroll bars so turn them off so they aren't visible during resizes.
				canvas.horizontalScrollPolicy = "off";
				canvas.verticalScrollPolicy = "off";
				canvas.label = "viewLabel";
				canvas.percentWidth = 100;
				canvas.percentHeight = 100;
				viewStack.addChild(canvas);
				
				// Create a manager for each view.
				var manager:PodLayoutManager = new PodLayoutManager();
				manager.container = canvas;
				manager.id = "viewId";
				manager.addEventListener(LayoutChangeEvent.UPDATE, StateManager.setPodLayout);
				
				StateManager.setViewIndex(0); // Save the view index.				
				viewStack.selectedIndex = 0;
				tabBar.selectedIndex = 0;
				addPods(manager);
			}
			
			// Adds the pods to a view.
			private function addPods(manager:PodLayoutManager):void
			{
				// Loop through the pod nodes for each view node.
				//var podXMLList:XMLList = podDataDictionary[manager];
				//var podLen:Number = podXMLList.length();
				var unsavedPodCount:Number = 0;
				
					var list:ArrayCollection = new ArrayCollection();
					/* 为list添加事件处理方法 */
					list.addEventListener(CollectionEvent.COLLECTION_CHANGE, function(e1:CollectionEvent):void{
						if(e1.location > 0){
							var prvObj:Object = list.getItemAt(e1.location - 1);
							var curObj:Object = list.getItemAt(e1.location);
							var prvContent:ModulePodContent = prvObj.modulePodContent as ModulePodContent;
							var curContent:ModulePodContent = curObj.modulePodContent as ModulePodContent;
							prvContent.addEventListener(ModuleEvent.READY, function(e2:ModuleEvent):void{
								curContent.moduleUrl = curObj.url;
							});
						}
					});
				
						for(var i:Number = 0; i < podlist.length; i++){
							var podContent:ModulePodContent = new ModulePodContent();
							//podContent.moduleUrl = podlist.getItemAt(i).url;
							
							if (podContent != null)
							{
								var viewId:String = manager.id;
								var podId:String = podlist.getItemAt(i).id;
								list.addItem(createListItem(podContent, podlist.getItemAt(i).url));
								var pod:Pod = new Pod();
								pod.id = podId;
								pod.styleName='podPanel'; 
								pod.title = podlist.getItemAt(i).title;
								pod.setStyle("paddingTop", 15);
								pod.addChild(podContent);
								
								var index:Number;
								
								if (StateManager.isPodMinimized(viewId, podId))
								{
									index = StateManager.getMinimizedPodIndex(viewId, podId);
									manager.addMinimizedItemAt(pod, index);
								}
								else
								{
									index = StateManager.getPodIndex(viewId, podId);
									
									// If the index hasn't been saved move the pod to the last position.
									if (index == -1)
									{
										index = podlist.length + unsavedPodCount;
										unsavedPodCount += 1;
									}
									
									manager.addItemAt(pod, index, StateManager.isPodMaximized(viewId, podId));
								}
								
								pod.addEventListener(IndexChangedEvent.CHANGE, onChangePodView);
								
								podHash[pod] = manager;
							}
						}
					
				
				// Listen for the last pod to complete so the layout from the ContainerWindowManager is done correctly.
				if(pod){ 
					pod.addEventListener(FlexEvent.UPDATE_COMPLETE, onCreationCompletePod);
				}
				if(list.length != 0){
					(list.getItemAt(0).modulePodContent as ModulePodContent).moduleUrl = (list.getItemAt(0).url as String);
				}
			}
			
			
			/**
			 * 创建列表项，每一个列表项包含了ModulePodContent和对应的url
			 * */
			private function createListItem(modulePodContent:ModulePodContent, url:String):Object{
				var obj:Object = new Object();
				obj.modulePodContent = modulePodContent;
				obj.url = url;
				return obj;
			}
			
			
			
			// Pod has been created so update the respective PodLayoutManager.
			private function onCreationCompletePod(e:FlexEvent):void
			{
				e.currentTarget.removeEventListener(FlexEvent.UPDATE_COMPLETE, onCreationCompletePod);
				var manager:PodLayoutManager = PodLayoutManager(podHash[e.currentTarget]);
				manager.removeNullItems();
				manager.updateLayout(false);
			}
			
			// Saves the pod content ViewStack state.
			private function onChangePodView(e:IndexChangedEvent):void
			{
				var pod:Pod = Pod(e.currentTarget);
				var viewId:String = PodLayoutManager(podHash[pod]).id;
				StateManager.setPodViewIndex(viewId, pod.id, e.newIndex);
			}
		]]>
	</mx:Script>
	<mx:TabBar
		id="tabBar"
		dataProvider="viewStack" visible="false" />
	<mx:ViewStack
		id="viewStack"
		paddingTop="15"
		width="100%" height="100%" />

</mx:Canvas>
